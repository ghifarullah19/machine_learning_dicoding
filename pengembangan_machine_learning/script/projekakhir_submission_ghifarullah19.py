# -*- coding: utf-8 -*-
"""ProjekAkhir_submission_ghifarullah19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1942Ai_g_jxVqDQhjWabiwH33vhBU9X87
"""

!pip install split-folders

!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d lutfi213040014/raw-plant

import zipfile
import os

with zipfile.ZipFile('raw-plant.zip', 'r') as zip_ref:
    zip_ref.extractall('raw-plant')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import zipfile, os
from splitfolders import ratio
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

base_plant = "/content/tmp/plant-cv-images"

ratio('/content/raw-plant/botanify-360', output=base_plant, seed=1337, ratio=(.8, .2))
train_dir_plant = os.path.join(base_plant, 'train')
val_dir_plant = os.path.join(base_plant, 'val')

os.listdir(train_dir_plant)

os.listdir(val_dir_plant)

train_plant_datagen = ImageDataGenerator(
  rescale=1./255,
  rotation_range=20,
  shear_range=0.2,
  fill_mode='nearest'
)

test_plant_datagen = ImageDataGenerator(
  rescale=1./255
)

train_plant_generator = train_plant_datagen.flow_from_directory(
  train_dir_plant,
  target_size=(224, 224),
  batch_size=32,
  class_mode='sparse'
)

validation_plant_generator = test_plant_datagen.flow_from_directory(
  val_dir_plant,
  target_size=(224, 224),
  batch_size=32,
  class_mode='sparse'
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(96, (11, 11), strides=(4, 4), padding='same', activation='relu', input_shape=(224, 224, 3)),
    tf.keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    tf.keras.layers.Conv2D(256, (5, 5), padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    tf.keras.layers.Conv2D(384, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.Conv2D(384, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(4096, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(4096, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(29, activation='softmax')
])

model.compile(loss='sparse_categorical_crossentropy',
              optimizer=Adam(0.0001),
              metrics=['accuracy'])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.95) and (logs.get('val_accuracy') > 0.9):
      print("\nAkurasi telah mencapai > 95%!")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(
  train_plant_generator,
  epochs=10,
  validation_data=validation_plant_generator,
  verbose=1,
  callbacks=[callbacks]
)

plt.plot(history.history['accuracy'], label='Training')
plt.plot(history.history['val_accuracy'], label='Testing')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(loc='lower right')
plt.show()

plt.plot(history.history['loss'], label='Training')
plt.plot(history.history['val_loss'], label='Testing')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc='upper right')
plt.show()

model.evaluate(validation_plant_generator, verbose=1)

model.save('/content/models/model_botanify.h5')

import pathlib
export_dir = '/content/models/saved_model/'
tf.saved_model.save(model, export_dir)

# Convert SavedModel menjadi vegs.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('botanify.tflite')
tflite_model_file.write_bytes(tflite_model)